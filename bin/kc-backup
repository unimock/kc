#!/bin/bash
. /opt/kc/funcs/script_funcs
sf_start

. /opt/kc/etc/config

MPOINT=/backup
NAME="kvm-bup"
HOSTS=$( cat ${KC_TSP_DIR}/config/hosts.conf )
KC_BACKUP_EXCLUDE=""

DEV=""

#############################
_usage()
{
  if [ "$1" = "" ] ; then
    echo ""
    echo "usage: `basename $0` [--node=<node>] [--simul] <command>"
    echo ""
    echo "`basename $0` mount             # mount backup device"
    echo "`basename $0` umount            # un-mount backup device"
    echo "`basename $0` backup [<domain>] # do backup"
    echo "`basename $0` restore <domain>  # restore domain from backup device"
    echo "`basename $0` delete <domain>   # delete domain backup from backup device"
    echo "`basename $0` info <domain>     # virtnbdbackup debug infos"
    echo ""
    exit 0
  fi
}
#############################
_virsh() {
  _node="$1"
  shift
  virsh -c qemu+ssh://root@${_node}/system $@
  return $?
}
#############################
_ssh() {
  _node="$1"
  shift
  ssh -q root@${_node} $@
}
#############################
_check_for_backup_device() {
  FI=${KC_TSP_DIR}/config/backup-uuids.conf
  if [ ! -e $FI ] ; then
    return 1
  fi
  for host in $HOSTS ; do
    for UUID in $( cat $FI ) ; do
      DEV=`_ssh $host blkid  -U $UUID`
      ret=$?
      if [ "$ret" = "0" ] ; then
        echo "$host"
        return 0
      fi
    done
  done
  echo ""
  return 0
}
#############################
_mount() {
  if [ ! -d $MPOINT ] ; then
    echo "create mountpoint: $MPOINT"
    mkdir -p $MPOINT
  fi
  _mount=0
  FI=${KC_TSP_DIR}/config/backup-uuids.conf
  for UUID in $( cat $FI ) ; do
    DEV=`blkid  -U $UUID`
    ret=$?
    if [ "$ret" = "0" ] ; then
      mkdir -p /var/kc
      echo "$DEV" > /var/kc/device
      cryptsetup luksOpen $DEV $NAME < ${KC_TSP_DIR}/config/backup-passwd.conf
      mount /dev/mapper/$NAME $MPOINT
      . $MPOINT/INFO.cfg 
      echo "backup device: <${INFO_HD_NAME}> successfully mounted on <$MPOINT>"
      _mount=1
      break
    fi
  done
  if [ "${_mount}" != "1" ] ; then
    echo "no backup hd found"
    sf_end
  fi 
}
#############################
_umount()
{
  . $MPOINT/INFO.cfg
  umount $MPOINT
  cryptsetup luksClose $NAME
  echo "backup device: <${INFO_HD_NAME}> successfully unmounted from <$MPOINT>"
  if [ -f /var/kc/device  ] ; then
    hdparm -y  $(cat /var/kc/device) 2>/dev/null # spin-off disk
  fi
}
#############################
_info()
{
  DOM="$1"
  printf "#\n#\n#\n"
  unset imgs ; declare -A imgs
  eval $( _virsh ${NODE} domblklist $DOM --details | awk '/file +disk/ {print "imgs["$3"]="$4}' )
  for dev in ${!imgs[@]}; do
    echo $dev : ${imgs[$dev]}
    qemu-img info -U ${imgs[$dev]}
  done
  printf "#\n# libvirt chackpoint infos in /var/lib/libvirt/qemu/checkpoint/$DOM/:\n#\n"
  _ssh ${NODE} ls -la /var/lib/libvirt/qemu/checkpoint/$DOM/
  printf "#\n# virtnbdbackup checkpoint infos in /tsp0/sync/backup/$DOM/:\n#\n"
  ls -la /tsp0/sync/backup/$DOM/
  printf "#\n# virsh checkpoint-list for $DOM:\n#\n"
  _virsh ${NODE} checkpoint-list $DOM
  printf "#\n# repairing commands:\n#\n"
  echo " you can remove checkpoints from a domain with:"
  echo "   if bitmaps are in images:"
  echo "      > virsh checkpoint-delete $DOM --checkpointname virtnbdbackup.0"
  echo "   if bitmaps are not in images:"
  echo "      > virsh checkpoint-delete $DOM --checkpointname virtnbdbackup.0  --metadata"
  echo " if a backup was aborted, check:"
  echo "   > virsh domjobinfo $DOM"
  echo "   if job exists, you can abort it with:"
  echo "     > virsh domjobabort $DOM"
  echo " to remove bitmaps from an imge, call:"
  echo "   > qemu-img info /tsp0/images/wws_0.qcow2"
  echo "   > qemu-img bitmap  /tsp0/images/wws_0.qcow2 --remove virtnbdbackup.1"
  echo "   > qemu-img bitmap  /tsp0/images/wws_0.qcow2 --remove virtnbdbackup.0"
  echo "   > qemu-img info /tsp0/images/wws_0.qcow2"
  echo ""
  echo "assigned images:"
  printf "#\n# assigned images:\n#\n"
  img_list=$(kvmc --domain=$DOM list images)
  for i in $img_list ; do
    echo "image: $i :"
    _ssh ${NODE} qemu-img info -U $i  | grep " name: virtnbdbackup"
  done
}
################################################################################################
# 
# magic main
#
################################################################################################

usbhd_at_node=$(_check_for_backup_device)
if [ "$?" != "0" ] ; then
  echo "no usbhd connected!!!"
  exit 1
fi
if [ "$usbhd_at_node" != "$(hostname)" ] ; then
  echo "delegate backup to $usbhd_at_node"
  _ssh $usbhd_at_node $0 $@
  exit $?
fi
opt_node=""
opt_simul="0"
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    --node=*)   opt_node=${1#*=}   ; shift 1 ;;
    --simul)    opt_simul="1"      ; shift 1 ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

NODE=$(hostname)
if [ "$opt_node" != "" ] ; then
  NODE="$opt_node"
fi

CMD="$1"
VMB="$2"

if [ "$CMD" = "mount" ] ; then
  _mount
  exit 0
fi 
if [ "$CMD" = "umount" ] ; then
  _umount
  exit 0
fi
if [ "$CMD" = "info" ] ; then
  if [ "$VMB" = "" ] ; then
     echo "error: domain not given!"
     exit 1
  fi
  _info $VMB
  exit 0
fi 

_usage $CMD
if [ "$CMD" != "backup" -a "$CMD" != "restore"  -a "$CMD" != "delete" ] ; then
  echo "unkomwn command given"
  exit 1
fi
if [ "$CMD" = "restore" -a "$VMB" = "" ] ; then
  echo "error: domain not given!"
  exit 1
fi

date
_mount

if [ ! -f "${KC_TSP_DIR}/config/kc-backup.conf" ] ; then
  echo "error: missing definition file <${KC_TSP_DIR}/config/kc-backup.conf>."
  exit 1
fi
. ${KC_TSP_DIR}/config/kc-backup.conf
if [ "$KC_BACKUP_AREA" = "" ] ; then
  echo "error: backup area <KC_BACKUP_AREA> not set in <${KC_TSP_DIR}/config/kc-backup.conf>."
  exit 1
fi
#
# delete domain from usb
#
if [ "$CMD" = "delete" ] ; then
  if [ "$VMB" = ""  ] ; then
    echo "error: nod domain given"
    _umount
    exit 1
  fi 
  rm -rvf $MPOINT/$KC_BACKUP_AREA/domains/$VMB
  _umount
  exit 0
fi
#
# restore domain
#
if [ "$CMD" = "restore" ] ; then
  kvmc --domain=$VMB rm complete
  #virtnbdrestore -D -N $VMB -i $MPOINT/$KC_BACKUP_AREA/domains/$VMB -o ${KC_TSP_DIR}/images
  virtnbdrestore -U qemu+ssh://root@${NODE}/system --ssh-user root -D -N $VMB -i $MPOINT/$KC_BACKUP_AREA/domains/$VMB -o ${KC_TSP_DIR}/images
  ret=$?
  if [ "$ret" != "0" ] ; then
    echo "error: virtnbdrestore returns <$ret>"
    _umount
    exit 1
  fi
  kvmc --domain=$VMB up
  rm -rvf  ${KC_TSP_DIR}/sync/backup/$VMB
  mkdir -p ${KC_TSP_DIR}/sync/backup/$VMB
  rm -f    ${KC_TSP_DIR}/sync/backup/$VMB.conf  # mark this backup for removal on next backup, so full backup will be done
  _umount
  exit 0
fi
#
# backup
#
if [ "$CMD" = "backup" ] ; then
  # check for backup device
  if [ "$VMB" = "" ] ; then # only for complete backup
    #
    # backup rfs-changes
    #
    for host in $HOSTS ; do
      mkdir -p ${KC_TSP_DIR}/rfs-backup/${h}
      _ssh $host "rsync -av --files-from=/opt/kc/etc/rfs-changes  / ${KC_TSP_DIR}/rfs-backup/${host}"
    done
    rsync -av ${KC_TSP_DIR}/rfs-backup/ $MPOINT/$KC_BACKUP_AREA/rfs-backup
    #
    # backup ISOs
    #
    if [ -d  ${KC_TSP_DIR}/ISOs ] ; then
      mkdir -p $MPOINT/$KC_BACKUP_AREA/ISOs
      rsync -av --delete ${KC_TSP_DIR}/ISOs/   $MPOINT/$KC_BACKUP_AREA/ISOs
    fi
    #
    # backup kc config
    #
    mkdir -p $MPOINT/$KC_BACKUP_AREA/config
    rsync -av ${KC_TSP_DIR}/config/ $MPOINT/$KC_BACKUP_AREA/config
  fi
  #
  # backup vms
  #
  mkdir -p ${KC_TSP_DIR}/sync/backup
  echo "===================================================================="
  for host in $HOSTS ; do
    if [ "$opt_node" != "" -a "$host" !=  "$opt_node" ] ; then
      continue
    fi
    vms=$( _virsh ${host} list --all --name )
    for vm in $vms ; do
      if [[ $vm == \[*:*[1-9]\] ]] ; then
        continue ;
      fi
      if [ "$VMB" != "$vm" -a "$VMB" != "" ] ; then
        continue
      fi
      state=$( _virsh ${host} domstate ${vm} )
      _DATE=$( date +"%Y-%m-%d %H:%M:%S" )
      echo "####################################################"
      echo "#  $vm @ ${h} ($state) ${_DATE}"
      echo "####################################################"
      # Get list of disk names and image paths
      unset imgs ; declare -A imgs
      disc=""
      disc=$( _virsh ${host} domblklist ${vm} --details | awk '/file +disk/ {print $3}' )
      eval $( _virsh ${host} domblklist ${vm} --details | awk '/file +disk/ {print "imgs["$3"]="$4}' )
      #
      # check for removal former backups from device, if new device detected
      #
      last_device=$( cat ${KC_TSP_DIR}/sync/backup/$vm.conf 2>/dev/null )
      if [ "$last_device"  != "${INFO_HD_NAME}" ] ; then
        rm -rvf  $MPOINT/$KC_BACKUP_AREA/domains/$vm 
        mkdir -p $MPOINT/$KC_BACKUP_AREA/domains/$vm
      fi
      #
      # exclude images
      #
      exclude_disks=""
      for d in ${disc[@]}; do
        img=${imgs[${d}]}
        if [[ "$(basename $img)" == $KC_BACKUP_EXCLUDE ]]; then
          exclude_disks="${exclude_disks},$d"
          echo "skipping backup of image: <$img>, because it of KC_BACKUP_EXCLUDE setting <$KC_BACKUP_EXCLUDE>"
        fi
      done
      if [ "${exclude_disks}" != "" ] ; then
        exclude_disks=${exclude_disks%,}
        exclude_disks="-x $exclude_disks"
      fi  
      mkdir -p ${KC_TSP_DIR}/sync/backup/$vm
      if [ "$opt_simul" = "1" ] ; then
        echo  virtnbdbackup -U qemu+ssh://root@${host}/system --ssh-user root -d $vm -l auto ${exclude_disks} -o $MPOINT/$KC_BACKUP_AREA/domains/$vm --checkpointdir ${KC_TSP_DIR}/sync/backup/$vm
      else
        virtnbdbackup -U qemu+ssh://root@${host}/system --ssh-user root -d $vm -l auto ${exclude_disks} -o $MPOINT/$KC_BACKUP_AREA/domains/$vm --checkpointdir ${KC_TSP_DIR}/sync/backup/$vm
        ret=$?
        if [ "$ret" != "0" ] ; then
          echo "error: virtnbdbackup returns <$ret>"
          _umount
          exit 1
        fi
      fi
    done
    # store backup device name
    echo "${INFO_HD_NAME}" > ${KC_TSP_DIR}/sync/backup/$vm.conf
  done
  echo "===================================================================="
  df -h  $MPOINT
  usage_pcent=$(df -h $MPOINT --output="pcent" | grep -v "Use" | sed "s| ||g" )
  if [ "$opt_simul" = "0" ] ; then
    echo "##############################"
    tree $MPOINT/$KC_BACKUP_AREA
    echo "##############################"
    tree ${KC_TSP_DIR}/sync/backup
    echo "##############################"
  fi
  _umount
  date
  if [ "$VMB" = "" -a "$opt_simul" = "0" ] ; then # only for complete backup
    if [ -e ${KC_TSP_DIR}/config/kc-backup.conf ] ; then
      . ${KC_TSP_DIR}/config/kc-backup.conf
      FI=${KC_TSP_DIR}/sync/backup/kc-backup.rep
      if [ ! -f ${FI} ] ; then
        mkdir -p `dirname ${FI}`
        touch ${FI}
      fi
      DAT=$(date +"%Y-%m-%d %H:%M:%S")
      sed -i "1s/^/${DAT} ${INFO_HD_NAME} [${usage_pcent}]\n/" ${FI}
      subject="kc-backup @ `hostname`"
      swaks --to ${KC_BACKUP_TO} --from ${KC_BACKUP_FROM} \
            -s   ${KC_BACKUP_SMTP} \
            --header "Subject: $subject" \
            --attach-type "text/plain" --attach-body @${FI} \
            --attach-type "text/plain" --attach @${FI} \
            -S 2
    fi
  fi
fi
sf_end


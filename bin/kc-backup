#!/bin/bash
. /opt/kc/funcs/script_funcs
sf_start

. /opt/kc/etc/config

MPOINT=/backup
NAME="kvm-bup"
HOSTS=$( cat ${KC_TSP_DIR}/config/hosts.conf )
KC_BACKUP_EXCLUDE=""

DEV=""

#############################
_usage()
{
  if [ "$1" = "" ] ; then
    echo ""
    echo "usage: `basename $0` [--node=<node>] [--simul] <command>"
    echo ""
    echo "`basename $0` mount             # mount backup device"
    echo "`basename $0` umount            # un-mount backup device"
    echo "`basename $0` backup [<domain>] # do backup"
    echo "`basename $0` restore <domain>  # restore domain from backup device"
    echo "`basename $0` reset   <domain>  # reset broken backups or delete domain backups from backup device"
    echo "`basename $0` info    <domain>  # show infos and commands for repairing broken backups"
    echo ""
    exit 0
  fi
}
#############################
_virsh() {
  _node="$1"
  shift
  virsh -c qemu+ssh://root@${_node}/system $@
  return $?
}
#############################
_ssh() {
  _node="$1"
  shift
  ssh -q root@${_node} $@
}
#############################
_check_for_backup_device() {
  FI=${KC_TSP_DIR}/config/backup-uuids.conf
  if [ ! -e $FI ] ; then
    return 1
  fi
  for host in $HOSTS ; do
    for UUID in $( cat $FI ) ; do
      DEV=`_ssh $host blkid  -U $UUID`
      ret=$?
      if [ "$ret" = "0" ] ; then
        echo "$host"
        return 0
      fi
    done
  done
  echo ""
  return 0
}
#############################
_mount() {
  if [ ! -d $MPOINT ] ; then
    echo "# create mountpoint: $MPOINT"
    mkdir -p $MPOINT
  fi
  _mount=0
  FI=${KC_TSP_DIR}/config/backup-uuids.conf
  for UUID in $( cat $FI ) ; do
    DEV=`blkid  -U $UUID`
    ret=$?
    if [ "$ret" = "0" ] ; then
      mkdir -p /var/kc
      echo "$DEV" > /var/kc/device
      cryptsetup luksOpen $DEV $NAME < ${KC_TSP_DIR}/config/backup-passwd.conf
      mount /dev/mapper/$NAME $MPOINT
      . $MPOINT/INFO.cfg 
      echo "# backup device: <${INFO_HD_NAME}> successfully mounted on <$MPOINT>"
      _mount=1
      break
    fi
  done
  if [ "${_mount}" != "1" ] ; then
    echo "# no backup hd found"
    sf_end
  fi 
}
#############################
_umount()
{
  . $MPOINT/INFO.cfg
  umount $MPOINT
  cryptsetup luksClose $NAME
  echo "# backup device: <${INFO_HD_NAME}> successfully unmounted from <$MPOINT>"
  if [ -f /var/kc/device  ] ; then
    xxx=$(cat /var/kc/device)
    echo "# spin off backup device ($xxx)"
    hdparm -y  $(cat /var/kc/device) 2>/dev/null | sed "s|^|# |g"
  fi
}
################################################################################################
# 
# magic main
#
################################################################################################

usbhd_at_node=$(_check_for_backup_device)
if [ "$?" != "0" ] ; then
  echo "no usbhd connected!!!"
  exit 1
fi
if [ "$usbhd_at_node" != "$(hostname)" ] ; then
  echo "delegate backup to $usbhd_at_node"
  _ssh $usbhd_at_node $0 $@
  exit $?
fi
opt_node=""
opt_simul="0"
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    --node=*)   opt_node=${1#*=}   ; shift 1 ;;
    --simul)    opt_simul="1"      ; shift 1 ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT

NODE=$(hostname)
if [ "$opt_node" != "" ] ; then
  NODE="$opt_node"
fi
if [ ! -f "${KC_TSP_DIR}/config/kc-backup.conf" ] ; then
  echo "error: missing definition file <${KC_TSP_DIR}/config/kc-backup.conf>."
  exit 1
fi
. ${KC_TSP_DIR}/config/kc-backup.conf
if [ "$KC_BACKUP_AREA" = "" ] ; then
  echo "error: backup area <KC_BACKUP_AREA> not set in <${KC_TSP_DIR}/config/kc-backup.conf>."
  exit 1
fi

CMD="$1"
VMB="$2"

if [ "$CMD" = "mount" ] ; then
  _mount
  exit 0
fi 
if [ "$CMD" = "umount" ] ; then
  _umount
  exit 0
fi

_usage $CMD
if [ "$CMD" != "backup" -a "$CMD" != "restore"  -a "$CMD" != "reset"  -a "$CMD" != "info" ] ; then
  echo "unkomwn command given"
  exit 1
fi
if [ "$CMD" = "restore" -a "${VMB}" = "" ] ; then
  echo "error: domain not given!"
  exit 1
fi

date | sed "s|^|# |g"
_mount

#
# reset domain from virtnbdback and remove from usb storage devce
# full backup will be started next time
#
DOM=""
if [ "$CMD" = "reset" -o "$CMD" = "info" ] ; then
  for domain in $(kvmc list) ; do
    if [ "$domain" = "$VMB" ] ; then
      DOM="$domain"
      break
    fi
  done
  if [ "${DOM}" = ""  ] ; then
    echo "error: no or wrong domain given"
    _umount
    exit 1
  fi
  xxx=$(kvmc --domain=$DOM ls)
  w_domain=$( echo $xxx | awk '{ print $1}')
  w_state=$(  echo $xxx | awk '{ print $2}')
  w_node=$(   echo $xxx | awk '{ print $3}')
  w_disks=$(  echo $xxx | awk '{ print $4}'| sed 's|,| |g' )
  virsh_opt=""
  if [ "`hostname`" != "$w_node" ] ; then
    virsh_opt="-c qemu+ssh://root@${w_node}/system"
  fi 
  echo "  domain: $w_domain"
  echo "  node:   $w_node"
  echo "  state:  $w_state"
  echo "  disks:  $w_disks"
  echo "##############################################"
  echo "# check for aborted domjob:"
  virsh $virsh_opt domjobinfo  ${w_domain} | sed "s|^|# |g"
  virsh $virsh_opt domjobinfo  ${w_domain} | grep Backup >/dev/null 2>&1
  if [ "$?" = "0" ] ; then
    echo    virsh $virsh_opt domjobabort ${w_domain}
  fi
  echo "##############################################"
  echo "# remove checkpoints from a domain"
  virsh $virsh_opt checkpoint-list ${w_domain} | sed "s|^|# |g"
  cp_list=$( virsh $virsh_opt checkpoint-list ${w_domain} | grep virtnbdbackup | awk '{ print $1}' )
  for i in $cp_list ; do
    echo    virsh $virsh_opt checkpoint-delete ${w_domain} --checkpointname $i  #wenn bitmap in image umleiten nach 2>/dev/null
    echo    virsh $virsh_opt checkpoint-delete ${w_domain} --checkpointname $i --metadata #wenn bitmap nicht in image
    if [ "$CMD" = "reset" ] ; then
      virsh $virsh_opt checkpoint-delete ${w_domain} --checkpointname $i            2>/dev/null
      virsh $virsh_opt checkpoint-delete ${w_domain} --checkpointname $i --metadata 2>/dev/null
    fi
  done 
  echo "##############################################"
  echo "# check virtnbd bitmaps are in used images, if yes"
  echo "kvmc --domain=${w_domain} down"
  for i in ${w_disks} ; do
    i=${i#*:}
    bitmaps=$( qemu-img info -U $i  | grep " name: virtnbdbackup" | sed 's| name: ||g')
    for b in $bitmaps ; do
      echo "qemu-img bitmap $i --remove $b"
    done
  done
  echo "kvmc --domain=${w_domain} up"
  echo "##############################################"
  echo  "# remove virtnbdbackup checkpoints:" 
  echo  rm -rvf ${KC_TSP_DIR}/sync/backup/${w_domain}
  echo "##############################################"
  echo "# remove last storage device information:"
  echo  rm -vf  ${KC_TSP_DIR}/sync/backup/${w_domain}.conf
  if [ "$CMD" = "reset" ] ; then
    rm -vf  ${KC_TSP_DIR}/sync/backup/${w_domain}.conf
  fi
  echo "##############################################"
  echo "# remove backup from usb device:" 
  echo "##############################################"
  echo "/opt/kc/bin/kc-backup mount"
  echo  rm -rvf $MPOINT/$KC_BACKUP_AREA/domains/${w_domain}
  echo "/opt/kc/bin/kc-backup umount"
  echo "##############################################"

  _umount
  exit 0
fi
#
# restore domain
#
if [ "$CMD" = "restore" ] ; then
  kvmc --domain=${VMB} rm complete
  virtnbdrestore -U qemu+ssh://root@${NODE}/system --ssh-user root -D -N ${VMB} -i $MPOINT/$KC_BACKUP_AREA/domains/${VMB} -o ${KC_TSP_DIR}/images
  ret=$?
  if [ "$ret" != "0" ] ; then
    echo "error: virtnbdrestore returns <$ret>"
    _umount
    exit 1
  fi
  kvmc --domain=${VMB} up
  rm -rvf  ${KC_TSP_DIR}/sync/backup/${VMB}
  mkdir -p ${KC_TSP_DIR}/sync/backup/${VMB}
  rm -f    ${KC_TSP_DIR}/sync/backup/${VMB}.conf
  _umount
  exit 0
fi
#
# backup
#
if [ "$CMD" = "backup" ] ; then
  # check for backup device
  if [ "${VMB}" = "" ] ; then # only for complete backup
    #
    # backup rfs-changes
    #
    for host in $HOSTS ; do
      mkdir -p ${KC_TSP_DIR}/rfs-backup/${h}
      _ssh $host "rsync -av --files-from=/opt/kc/etc/rfs-changes  / ${KC_TSP_DIR}/rfs-backup/${host}"
    done
    rsync -av ${KC_TSP_DIR}/rfs-backup/ $MPOINT/$KC_BACKUP_AREA/rfs-backup
    #
    # backup ISOs
    #
    if [ -d  ${KC_TSP_DIR}/ISOs ] ; then
      mkdir -p $MPOINT/$KC_BACKUP_AREA/ISOs
      rsync -av --delete ${KC_TSP_DIR}/ISOs/   $MPOINT/$KC_BACKUP_AREA/ISOs
    fi
    #
    # backup kc config
    #
    mkdir -p $MPOINT/$KC_BACKUP_AREA/config
    rsync -av ${KC_TSP_DIR}/config/ $MPOINT/$KC_BACKUP_AREA/config
  fi
  #
  # backup vms
  #
  mkdir -p ${KC_TSP_DIR}/sync/backup
  echo "===================================================================="
  for host in $HOSTS ; do
    if [ "$opt_node" != "" -a "$host" !=  "$opt_node" ] ; then
      continue
    fi
    vms=$( _virsh ${host} list --all --name )
    for DOM in $vms ; do
      if [ "${DOM}" = "mail1" ] ; then
        echo "##################################################"
        echo "# skipping domain <$DOM>"
        echo "##################################################"
        continue
      fi
      if [[ ${DOM} == \[*:*[1-9]\] ]] ; then
        continue ;
      fi
      if [ "${VMB}" != "${DOM}" -a "${VMB}" != "" ] ; then
        continue
      fi
      state=$( _virsh ${host} domstate ${DOM} )
      _DATE=$( date +"%Y-%m-%d %H:%M:%S" )
      echo "####################################################"
      echo "#  ${DOM} @ ${h} ($state) ${_DATE}"
      echo "####################################################"
      # Get list of disk names and image paths
      unset imgs ; declare -A imgs
      disc=""
      disc=$( _virsh ${host} domblklist ${DOM} --details | awk '/file +disk/ {print $3}' )
      eval $( _virsh ${host} domblklist ${DOM} --details | awk '/file +disk/ {print "imgs["$3"]="$4}' )
      #
      # check for removal former backups from device, if new device detected
      #
      last_device=$( cat ${KC_TSP_DIR}/sync/backup/${DOM}.conf 2>/dev/null )
      echo "# last backup device   : <$last_device>"
      echo "# current backup device: <${INFO_HD_NAME}>"
      if [ "$last_device"  != "${INFO_HD_NAME}" ] ; then
        echo "# full backup needed becaus of device changed, so cleaning up:"
        echo "#  - directory <$MPOINT/$KC_BACKUP_AREA/domains/${DOM}>"
        echo "#  - directory <${KC_TSP_DIR}/sync/backup/${DOM}>"
        echo "#  - file <${KC_TSP_DIR}/sync/backup/${DOM}.conf>"
        rm -rf   $MPOINT/$KC_BACKUP_AREA/domains/${DOM} 
        mkdir -p $MPOINT/$KC_BACKUP_AREA/domains/${DOM}
        rm -rf   ${KC_TSP_DIR}/sync/backup/${DOM}
        mkdir -p ${KC_TSP_DIR}/sync/backup/${DOM}
        rm -f    ${KC_TSP_DIR}/sync/backup/${DOM}.conf
      else
        echo "# doing incremental, because no device change"
      fi
      #
      # exclude images
      #
      exclude_disks=""
      #for d in ${disc[@]}; do
      #  img=${imgs[${d}]}
      #  if [[ "$(basename $img)" == $KC_BACKUP_EXCLUDE ]]; then
      #    exclude_disks="${exclude_disks},$d"
      #    echo "skipping backup of image: <$img>, because it of KC_BACKUP_EXCLUDE setting <$KC_BACKUP_EXCLUDE>"
      #  fi
      #done
      #if [ "${exclude_disks}" != "" ] ; then
      #  exclude_disks=${exclude_disks%,}
      #  exclude_disks="-x $exclude_disks"
      #fi  
      mkdir -p ${KC_TSP_DIR}/sync/backup/${DOM}
      if [ "$opt_simul" = "1" ] ; then
        echo  virtnbdbackup -U qemu+ssh://root@${host}/system --ssh-user root -d ${DOM} -l auto ${exclude_disks} -o $MPOINT/$KC_BACKUP_AREA/domains/${DOM} --checkpointdir ${KC_TSP_DIR}/sync/backup/${DOM}
      else
        virtnbdbackup -U qemu+ssh://root@${host}/system --ssh-user root -d ${DOM} -l auto ${exclude_disks} -o $MPOINT/$KC_BACKUP_AREA/domains/${DOM} --checkpointdir ${KC_TSP_DIR}/sync/backup/${DOM}
        ret=$?
        if [ "$ret" != "0" ] ; then
          echo "error: virtnbdbackup returns <$ret>"
          _umount
          exit 1
        fi
      fi
      # store backup device name
      echo "${INFO_HD_NAME}" > ${KC_TSP_DIR}/sync/backup/${DOM}.conf
    done
  done
  echo "===================================================================="
  df -h  $MPOINT
  usage_pcent=$(df -h $MPOINT --output="pcent" | grep -v "Use" | sed "s| ||g" )
  if [ "$opt_simul" = "0" ] ; then
    echo "##############################"
    tree $MPOINT/$KC_BACKUP_AREA
    echo "##############################"
    tree ${KC_TSP_DIR}/sync/backup
    echo "##############################"
  fi
  _umount
  date
  if [ "${VMB}" = "" -a "$opt_simul" = "0" ] ; then # only for complete backup
    if [ -e ${KC_TSP_DIR}/config/kc-backup.conf ] ; then
      . ${KC_TSP_DIR}/config/kc-backup.conf
      FI=${KC_TSP_DIR}/sync/backup/kc-backup.rep
      if [ ! -f ${FI} ] ; then
        mkdir -p `dirname ${FI}`
        touch ${FI}
      fi
      DAT=$(date +"%Y-%m-%d %H:%M:%S")
      sed -i "1s/^/${DAT} ${INFO_HD_NAME} [${usage_pcent}]\n/" ${FI}
      subject="kc-backup @ `hostname`"
      swaks --to ${KC_BACKUP_TO} --from ${KC_BACKUP_FROM} \
            -s   ${KC_BACKUP_SMTP} \
            --header "Subject: $subject" \
            --attach-type "text/plain" --attach-body @${FI} \
            --attach-type "text/plain" --attach @${FI} \
            -S 2
    fi
  fi
fi
sf_end


#!/bin/bash
. /opt/kc/funcs/script_funcs
sf_start

. /opt/kc/etc/config

MPOINT=/backup
NAME="kvm-bup"
HOSTS=$( cat ${KC_TSP_DIR}/config/hosts.conf )
KC_BACKUP_EXCLUDE=""

KC_BACKUP_SSH_OPT=""

DEV=""

#eval `ssh-agent`
# ssh-add 
#sudo -E -s /opt/kc/bin/kc-newbackup simul
#
#############################
_usage()
{
  if [ "$1" = "" ] ; then
    echo ""
    echo "usage:"
    echo ""
    echo "`basename $0` mount|umount|reset|status"
    echo "`basename $0` simul|backup [<domain>]"
    echo "`basename $0` restore <domain>"
    echo "`basename $0` delete <domain> # delete domain backup from backup device"
    echo ""
    exit 0
  fi
}
#############################
_mount()
{
  FI=${KC_TSP_DIR}/config/backup-uuids.conf
  if [ ! -e $FI ] ; then
    echo "error: missing uuid definition file <$FI>"
    sf_set_error
    sf_end
  fi
  if [ ! -d $MPOINT ] ; then
    echo "create mountpoint: $MPOINT"
    mkdir -p $MPOINT
  fi
  _mount=0
  for UUID in $( cat $FI ) ; do
    DEV=`blkid  -U $UUID`
    ret=$?
    if [ "$ret" = "0" ] ; then
      mkdir -p /var/kc
      echo "$DEV" > /var/kc/device
      cryptsetup luksOpen $DEV $NAME < ${KC_TSP_DIR}/config/backup-passwd.conf
      mount /dev/mapper/$NAME $MPOINT
      . $MPOINT/INFO.cfg 
      echo "backup device: <${INFO_HD_NAME}> successfully mounted on <$MPOINT>"
      _mount=1
      break
    fi
  done
  if [ "${_mount}" != "1" ] ; then
    echo "no backup hd found"
    sf_end
  fi 
}
#############################
_umount()
{
  . $MPOINT/INFO.cfg
  umount $MPOINT
  cryptsetup luksClose $NAME
  echo "backup device: <${INFO_HD_NAME}> successfully unmounted from <$MPOINT>"
  if [ -f /var/kc/device  ] ; then
    hdparm -y  $(cat /var/kc/device)  # spin-off disk
  fi
}
#############################
_status()
{
  FI=${KC_TSP_DIR}/config/gluster.conf
  if [ ! -e $FI ] ; then
    echo "error: missing gluster definition file <$FI>"
    sf_set_error
    sf_end
  fi
  . $FI
  if [ "$KC_GLUSTER_ACTIVE"  = "false" ] ; then
    echo "gluster not activated in $FI, so skipping gluster check!"
    return 0
  fi 
  #
  # check gluster status
  #
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Status:/ {print $2}' )
  for i in $list ; do
    if [ "$i" != "Connected" ] ; then
      echo "gluster status error <$i>"
      sf_set_error
      sf_end
    fi
  done
  echo "gluster_status=Connected"
  #
  # check gluster is in sync
  #
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Number of entries:/ {print $4}' )
  declare -i count
  count=0
  for i in $list ; do count=count+${i} ; done
  if [ "$count" != "0" ] ; then
    echo "gluster not in sync (entries=$count)"
    sf_set_error
    sf_end
  fi
  echo "gluster_entries=0"
}
################################################################################################
# 
# magic main
#
################################################################################################

CMD="$1"
VMB="$2"

if [ "$CMD" = "mount" ] ; then
  _mount
  exit 0
fi 
if [ "$CMD" = "umount" ] ; then
  _umount
  exit 0
fi
if [ "$CMD" = "status" ] ; then
  _status
  exit 0
fi

_usage $CMD
if [ "$CMD" != "backup" -a "$CMD" != "simul"  -a "$CMD" != "restore"  -a "$CMD" != "delete" ] ; then
  echo "unkomwn command given"
  exit 1
fi
if [ "$CMD" = "restore" -a "$VMB" = "" ] ; then
  echo "error: domain not given!"
  exit 1
fi

date
_status
_mount

if [ ! -f "${KC_TSP_DIR}/config/kc-backup.conf" ] ; then
  echo "error: missing definition file <${KC_TSP_DIR}/config/kc-backup.conf>."
  exit 1
fi
. ${KC_TSP_DIR}/config/kc-backup.conf
if [ "$KC_BACKUP_AREA" = "" ] ; then
  echo "error: backup area <KC_BACKUP_AREA> not set in <${KC_TSP_DIR}/config/kc-backup.conf>."
  exit 1
fi


if [ "$CMD" = "delete" ] ; then
  if [ "$VMB" = ""  ] ; then
    echo "error: nod domain given"
    _umount
    exit 1
  fi 
  rm -rvf $MPOINT/$KC_BACKUP_AREA/domains/$VMB
  _umount
  exit 0
fi


#
# restore domain
#
if [ "$CMD" = "restore" ] ; then
  virsh destroy  $VMB
  virsh undefine $VMB --remove-all-storage --checkpoints-metadata --snapshots-metadata
  virtnbdrestore -D -N $VMB -i $MPOINT/$KC_BACKUP_AREA/domains/$VMB -o ${KC_TSP_DIR}/images
  ret=$?
  if [ "$ret" != "0" ] ; then
    echo "error: virtnbdrestore returns <$ret>"
    _umount
    exit 1
  fi
  virsh start    $VMB
  rm -rvf  ${KC_TSP_DIR}/sync/backup/$VMB
  mkdir -p ${KC_TSP_DIR}/sync/backup/$VMB
  rm -f    ${KC_TSP_DIR}/sync/backup/$VMB.conf  # remove this backup for next full backup
  _umount
  exit 0
fi

if [ "$CMD" = "backup" ] ; then
  #
  # backup rfs-changes
  #
  for host in $HOSTS ; do
    mkdir -p ${KC_TSP_DIR}/rfs-backup/${h}
    ssh ${KC_BACKUP_SSH_OPT} -q ${KC_USER}@${host} "rsync -av --files-from=/opt/kc/etc/rfs-changes  / ${KC_TSP_DIR}/rfs-backup/${host}"
  done
  rsync -av ${KC_TSP_DIR}/rfs-backup/ $MPOINT/$KC_BACKUP_AREA/rfs-backup
  #
  # backup ISOs
  #
  if [ -d  ${KC_TSP_DIR}/ISOs ] ; then
    mkdir -p $MPOINT/$KC_BACKUP_AREA/ISOs
    rsync -av --delete ${KC_TSP_DIR}/ISOs/   $MPOINT/$KC_BACKUP_AREA/ISOs
  fi
  #
  # backup kc config
  #
  mkdir -p $MPOINT/$KC_BACKUP_AREA/config
  rsync -av ${KC_TSP_DIR}/config/ $MPOINT/$KC_BACKUP_AREA/config
  #
  # backup vms
  #
  mkdir -p ${KC_TSP_DIR}/sync/backup
  echo "===================================================================="
  for h in $HOSTS ; do
    vms=$( ssh ${KC_BACKUP_SSH_OPT} -q ${KC_USER}@${h} "virsh list --all --name" )
    for vm in $vms ; do
        if [[ $vm == \[*@kvm[1-9]\] ]] ; then
          continue ;
        fi
        state=$( ssh ${KC_BACKUP_SSH_OPT} -q ${KC_USER}@${h} "virsh domstate ${vm}" )
        _DATE=$( date +"%Y-%m-%d %H:%M:%S" )
        echo "####################################################"
        echo "#  $vm @ ${h} ($state) ${_DATE}"
        echo "####################################################"
        # Get list of disk names and image paths
        unset imgs ; declare -A imgs
        disc=""
        disc=$( ssh ${KC_BACKUP_SSH_OPT} -q ${KC_USER}@${h}  virsh domblklist ${vm} --details | awk '/file +disk/ {print $3}' )
        eval $( ssh ${KC_BACKUP_SSH_OPT} -q ${KC_USER}@${h}  virsh domblklist ${vm} --details | awk '/file +disk/ {print "imgs["$3"]="$4}' )
        if [ "$VMB" = "$vm" -o "$VMB" = "" ] ; then
            #
            # remove former backups from device, if new device detected
            #
          if [ ! -f ${KC_TSP_DIR}/sync/backup/$vm.conf ] ; then
            rm -rvf $MPOINT/$KC_BACKUP_AREA/domains/$vm
          fi
          last_device=$( cat ${KC_TSP_DIR}/sync/backup/$vm.conf )
          if [ "$last_device"  != "${INFO_HD_NAME}" ] ; then
            rm -rvf  $MPOINT/$KC_BACKUP_AREA/domains/$vm 
            mkdir -p $MPOINT/$KC_BACKUP_AREA/domains/$vm
          fi
          #
          # exclude images
          #
          exclude_disks=""
          for d in ${disc[@]}; do
            img=${imgs[${d}]}
            if [[ "$(basename $img)" == $KC_BACKUP_EXCLUDE ]]; then
              exclude_disks="${exclude_disks},$d"
              echo "skipping backup of image: <$img>, because it of KC_BACKUP_EXCLUDE setting <$KC_BACKUP_EXCLUDE>"
            fi
          done
          if [ "${exclude_disks}" != "" ] ; then
            exclude_disks=${exclude_disks%,}
            exclude_disks="-x $exclude_disks"
          fi  
          echo "jetzt backup f端r Domain <$vm> durchf端hren..."
          if [ "$CMD" != "simul" ] ; then
            mkdir -p ${KC_TSP_DIR}/sync/backup/$vm
            virtnbdbackup  -d $vm -l auto ${exclude_disks} -o $MPOINT/$KC_BACKUP_AREA/domains/$vm --checkpointdir ${KC_TSP_DIR}/sync/backup/$vm
            ret=$?
            if [ "$ret" != "0" ] ; then
              echo "error: virtnbdbackup returns <$ret>"
              _umount
              exit 1
            fi
            # store backup device name
            echo "${INFO_HD_NAME}" > ${KC_TSP_DIR}/sync/backup/$vm.conf
          fi
          echo "backup f端r Domain <$vm> ist durchgef端hrt"
          if [ "$CMD" != "simul" ] ; then
            #echo "ssh ${KC_BACKUP_SSH_OPT} -q ${KC_USER}@${h} "virsh dumpxml $vm"  > $MPOINT/domains/${vm}/${vm}.xml"
            true
          fi

        fi
    done
  done
  echo "===================================================================="
  df -h  $MPOINT
  usage_pcent=$(df -h $MPOINT --output="pcent" | grep -v "Use" | sed "s| ||g" )
  echo "##############################"
  tree $MPOINT/$KC_BACKUP_AREA
  echo "##############################"
  tree ${KC_TSP_DIR}/sync/backup
  echo "##############################"
  _umount
  date

  if [ -e ${KC_TSP_DIR}/config/kc-backup.conf ] ; then
    . ${KC_TSP_DIR}/config/kc-backup.conf
    FI=${KC_TSP_DIR}/sync/backup/kc-backup.rep
    if [ ! -f ${FI} ] ; then
      mkdir -p `dirname ${FI}`
      touch ${FI}
    fi
    DAT=$(date +"%Y-%m-%d %H:%M:%S")
    sed -i "1s/^/${DAT} ${INFO_HD_NAME} [${usage_pcent}] new\n/" ${FI}
    subject="kc-backup @ `hostname`"
    swaks --to ${KC_BACKUP_TO} --from ${KC_BACKUP_FROM} \
          -s   ${KC_BACKUP_SMTP} \
          --header "Subject: $subject" \
          --attach-type "text/plain" --attach-body @${FI} \
          --attach-type "text/plain" --attach @${FI} \
          -S 2
  fi

fi
sf_end


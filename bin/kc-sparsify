#!/bin/bash
. /opt/kc/funcs/script_funcs
sf_start

. /opt/kc/etc/config

GLUSTER_VOLUME="cust"
MPOINT=/backup
NAME="kvm-bup"
HOSTS=$( cat ${KC_TSP_DIR}/config/hosts.conf )
EXCLUDE="*_temp_disk.qcow2"

#############################
_usage()
{
  if [ "$1" = "" ] ; then
    echo "  usage: `basename $0` status|simul|real [domain]"
    exit 0
  fi
}
#############################
_status()
{
  FI=${KC_TSP_DIR}/config/gluster.conf
  if [ ! -e $FI ] ; then
    echo "error: missing gluster definition file <$FI>"
    sf_set_error
    sf_end
  fi
  . $FI
  #
  # check gluster status
  #
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Status:/ {print $2}' )
  for i in $list ; do
    if [ "$i" != "Connected" ] ; then
      echo "gluster status error <$i>"
      sf_set_error
      sf_end
    fi
  done
  echo "gluster_status=Connected"
  #
  # check gluster is in sync
  #
  list=$( gluster volume heal ${GLUSTER_VOLUME} info | awk '/^Number of entries:/ {print $4}' )
  declare -i count
  count=0
  for i in $list ; do count=count+${i} ; done
  if [ "$count" != "0" ] ; then
    echo "gluster not in sync (entries=$count)"
    sf_set_error
    sf_end
  fi
  echo "gluster_entries=0"
}
################################################################################################
# 
# magic main
#
################################################################################################

CMD="$1"
VMB="$2"

if [ "$CMD" = "status" ] ; then
  _status
  exit 0
fi
_usage $CMD
if [ "$CMD" != "real" -a "$CMD" != "simul" ] ; then
  echo "unkomwn command given"
  exit 1
fi

date
_status

  for h in $HOSTS ; do
    vms=$( ssh -q ${KC_USER}@${h} "virsh list --all --name" )
    for vm in $vms ; do
        if [[ $vm == \[*@kvm[1-9]\] ]] ; then
          continue ;
        fi
        state=$( ssh -q ${KC_USER}@${h} "virsh domstate ${vm}" )
        _DATE=$( date +"%Y-%m-%d %H:%M:%S" )
        echo "####################################################"
        echo "#  $vm @ ${h} ($state) ${_DATE}"
        echo "####################################################"
        # Get list of disk names and image paths
        unset imgs ; declare -A imgs
        disc=""
        disc=$( ssh -q ${KC_USER}@${h}  "virsh domblklist ${vm} --details" | awk '/^file +disk/ {print $3}' )
        eval $( ssh -q ${KC_USER}@${h}  "virsh domblklist ${vm} --details" | awk '/^file +disk/ {print "imgs["$3"]="$4}' )
        if [ "$VMB" = "$vm" -o "$VMB" = "" ] ; then
          ssh -q ${KC_USER}@${h}  "virsh domblklist ${vm} --details"
          if [ "$state" != "shut off" ] ; then
            echo ssh -q ${KC_USER}@${h} "virsh shutdown  $vm"
            if [ "$CMD" = "real" ] ; then
              ssh -q ${KC_USER}@${h} "virsh shutdown  $vm"
            fi
          fi
          # wait until system is down
          # timeout 60s
          for i in {0..60} ; do
            sleep 1
            echo "Number: $i"
            s=$( ssh -q ${KC_USER}@${h} "virsh domstate ${vm}" )
            echo "  wait until system is down : i=$i <$s>"
            if [ "$s" = "shut off" ] ; then
              break ;
            fi
            if [ $i -ge 60 ] ; then
              echo "error wait for off!!!!"
              exit 1
            fi
          done


          for d in ${disc[@]}; do
            img=${imgs[${d}]}
            #if [[ "$(basename $img)" == $EXCLUDE ]]; then
            #  echo "skipping backup of image: <$img>, because of EXCLUDE setting <$EXCLUDE>"
            #else
              echo ssh -q ${KC_USER}@${h} "virt-sparsify --in-place ${img}"
              if [ "$CMD" = "real" ] ; then
                ssh -q ${KC_USER}@${h} "virt-sparsify --in-place ${img}"
                ret=$?
                if [ "$ret" != "0" ] ; then
                   echo "ERROR = $ret !!!!!!"
                   exit $ret
                fi
              fi
            #fi
          done
          if [ "$state" != "shut off" ] ; then
            echo ssh -q ${KC_USER}@${h} "virsh start  $vm"
            if [ "$CMD" = "real" ] ; then
              ssh -q ${KC_USER}@${h} "virsh start  $vm"
            fi
          fi

        fi
    done
  done

sf_end


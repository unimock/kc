#!/bin/bash
CONFIG=/opt/kc/etc/config

gluster_state="0"

if [ ! -f  ${CONFIG} ] ; then
  printf "initialize default kc configuration in <${CONFIG}>:"
  mkdir -p $(dirname ${CONFIG})
  echo 'KC_TSP_DIR="/tsp0"' >> ${CONFIG}
  cat ${CONFIG} | sed -e "s|^|> |g"
  exit 0
fi
. ${CONFIG}

host_list=$( cat ${KC_TSP_DIR}/config/hosts.conf )
##############################################################################################
_help() {
  IAM=`basename $0`
  if [ "$1" = "" ] ; then
    echo "# usage: "
    echo ""
    echo "$IAM [--short] [--state=<state>] [--domain=<domain>] <command>"
    echo "#"
    echo "# commands:"
    echo "#"
    echo " * status             # show gluster status"
    echo " * ls                 # human readable list"
    echo " * list               # list domains only (scripting output)"
    echo " * up                 # shutoff domain and wait until is down"
    echo " * down               # start domain"
    echo " * rm doamin|complete # destroy, undefine domain and assigned images"
    echo " * mig <target-node>  # live migration to target"
    echo " * sparsify           # sparsify assigned images"
    echo " * gluster_check      # ret=0..OK, ret=1..ERR"

    echo "#"
    echo "# examples:"
    echo "#"
    echo "$IAM --node=kvm2   mig kvm1 # migration all domains from kvm2 to kvm1"
    echo "$IAM --domain=test mig kvm2 # migration domain test to kvm2"

    echo ""

    echo "#"
    echo "# other usefull kc commands:"
    echo "#"
    echo "kc-backup <command>  # USB-HD backup/restore" 
    echo "kc-rsync             # old USB-HD backup/restore"
    echo "kc-temp-disk"
    echo ""
  fi
}


#############################
_gluster_check() {
  
  FI=${KC_TSP_DIR}/config/gluster.conf
  if [ ! -e $FI ] ; then
    echo "missing gluster definition file <$FI>"
    return 1
  fi
  . $FI
  if [ "$KC_GLUSTER_ACTIVE"  = "false" ] ; then
    return 0
  fi 
  # check gluster status
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Status:/ {print $2}' )
  for i in $list ; do
    if [ "$i" != "Connected" ] ; then
      echo "gluster status error <$i>"
      return 1
    fi
  done
  # check gluster is in sync
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Number of entries:/ {print $4}' )
  declare -i count
  count=0
  for i in $list ; do count=count+${i} ; done
  if [ "$count" != "0" ] ; then
    echo "gluster not in sync (entries=$count)"
    return 1
  fi
  return 0
}
##############################################################################################
_list() {
  node=$1 ; domain=$2 ; state=$3
  printf "%s\n" "$domain"
  return 0
}
##############################################################################################
_ls() {
  node=$1 ; domain=$2 ; state=$3
  if [[ "$opt_short" = "1" ]] ; then
    printf "%s\n" "$domain"
  else
    unset img_arr ; declare -A img_arr
    eval $( ssh -q $node virsh domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
    images=""
    for img in ${!img_arr[@]}; do
      images="$images,$img:${img_arr[$img]}"
      #echo "         $img:${img_arr[$img]}"
      #  #qemu-img info -U ${img_arr[$img]}
    done
    images=${images#,}
    printf "%-16s  %-8s  %-6s %s\n" "$domain" "$state" "$node" "$images"
  fi
  return 0
}
##############################################################################################
_down() {
  node=$1 ; domain=$2 ; state=$3
  if [[ "$state" != "shutoff" ]] ; then
    ssh -q $node virsh shutdown ${domain} >/dev/null
    # wait until system is down, timeout 120s
    i=0
    while true ; do
      i=$(( i + 1 ))
      sleep 1
      s=$( ssh -q $node virsh domstate ${domain} )
      printf "."
      if [[ "$s" == "shut off" ]] ; then
        break ;
      fi
      if [ $i -ge 180 ] ; then
         echo "error wait for shutoff!!!!"
         return 1
      fi
    done
    printf "\n"
  fi
  return $?
}
##############################################################################################
_up() {
  node=$1 ; domain=$2 ; state=$3
  ssh -q $node virsh start $domain >/dev/null
  return $?
}
##############################################################################################
_rm() {
  node=$1 ; domain=$2 ; state=$3 ; subcmd=$4
  if [[ "$subcmd" != "domain" && "$subcmd" != "complete" ]] ; then
    echo "error sub-command domain or complete not given!"
    return 1
  fi
  if [[ "$state" != "shutoff" ]] ; then
    ssh -q $node virsh destroy  $domain
  fi
  if [[ "$subcmd" == "complete" ]] ; then
    unset img_arr ; declare -A img_arr
    eval $( ssh -q $node virsh domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
    for img in ${!img_arr[@]}; do
      KC_BACKUP_EXCLUDE="*_temp_disk.qcow2"
      if [[ "$(basename ${img_arr[$img]})" == $KC_BACKUP_EXCLUDE ]]; then
        echo "skipping deletion of image: <${img_arr[$img]}>, because of KC_BACKUP_EXCLUDE setting <$KC_BACKUP_EXCLUDE>"
        continue
      fi
      ssh -q $node rm -f ${img_arr[$img]}
    done
  fi
  ssh -q $node virsh undefine $domain --checkpoints-metadata --snapshots-metadata #--remove-all-storage
  return $?
}
##############################################################################################
_mig() {
  node=$1 ; domain=$2 ; state=$3 ; target=$4
  if [ "$target" = "" ] ; then
    echo "error: migration target node not given!"
    return 1
  fi
  if [ "$state" = "cold-stby" ] ; then
    echo "skipping cold-stby domain <$domain>"
    return 0
  fi
  if [ "$gluster_check" != "0" ] ; then
    echo "error: gluster error!"
    return 1
  fi
  ssh -q $target virsh undefine "[${domain}:${target}]" 2>/dev/null
  ssh -q $node "virsh dumpxml $domain > /tmp/dump.xml"
  ssh -q $node "sed -i \"s|<name>${domain}</name>|<name>[${domain}:${node}]</name>|g\" /tmp/dump.xml"
  # hardware addresses need to be removed, libvirt will assign new addresses automatically
  ssh -q $node sed -i /uuid/d /tmp/dump.xml
  #keep mac address  sed -i '/mac address/d' /tmp/dump.xml
  ssh -q $node   virsh migrate --live $domain --persistent --undefinesource --verbose  qemu+ssh://root@${target}/system
  ssh -q $target virsh autostart $domain
  ssh -q $node   virsh define /tmp/dump.xml
  #chown libvirt-qemu:kvm ${KC_TSP_DIR}/images/*
  return 0
}
##############################################################################################
_sparsify() {
  node=$1 ; domain=$2 ; state=$3
  if [ "$state" = "cold-stby" ] ; then
    echo "skipping cold-stby domain <$domain>"
    return 0
  fi
  _down $@
  unset img_arr ; declare -A img_arr
  eval $( ssh -q $node virsh domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
  for img in ${!img_arr[@]}; do
    ssh -q $node virt-sparsify --in-place ${img_arr[$img]}
  done
  _up $@
  return 0
}
##############################################################################################
# magic main
##############################################################################################
opt_state=""
opt_short=""
opt_node=""
opt_domain=""
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    --state=*)  opt_state=${1#*=}  ; shift 1 ;;
    --domain=*) opt_domain=${1#*=} ; shift 1 ;;
    --node=*)   opt_node=${1#*=}   ; shift 1 ;;
    --short)    opt_short="1"      ; shift 1 ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT


if [ "$1" = "" ] ; then
  _help
  exit 0
fi

CMD="$1"
shift

if [ "$CMD" = "status" ] ; then
  gluster volume status cust      | sed -e "s|^|  |g"
  echo "---------------"          | sed -e "s|^|  |g"
  gluster volume info   cust      | sed -e "s|^|  |g"
  echo "---------------"          | sed -e "s|^|  |g"
  gluster volume heal   cust info | sed -e "s|^|  |g"
  echo "---------------"          | sed -e "s|^|  |g"
  echo ""
  exit 0
fi
if [ "$CMD" = "init" ] ; then
  echo TBD
  exit 0
fi

_gluster_check
gluster_state=$?
if [ "$CMD" = "gluster_check" ] ; then
  exit $gluster_state
fi

dom_arr=()
for node in $host_list ; do
  dom_arr+=( `ssh -q $node virsh list --all | tail -n +3 | sed '/^[[:space:]]*$/d' | awk '{ print "node=\""  "'$node'\";" "domain=\"" $2 "\";" "state=\"" $3 $4 "\"" }' `)
done
for value in ${dom_arr[@]} ; do
  domain=""; node="" ; state=""
  eval $value
  if [[ "$domain" == "["*"]"   ]] ; then
    state="cold-stby"
  fi
  if [[  "$opt_domain" != "" &&   "$opt_domain" != "$domain" ]] ; then
    continue
  fi
  if [[  "$opt_node" != "" &&   "$opt_node" != "$node" ]] ; then
    continue
  fi
  if [[ "$opt_state" == "$state" || "$opt_state" == "" ]] ; then
    _${CMD} "$node" "$domain" "$state" $@
  fi
done
exit 0 



#!/bin/bash
architecture=$(dpkg --print-architecture)
EXTERNALS="
yq;yaml processor;4.40.3;--version;https://github.com/mikefarah/yq/releases/download/v<VERSION>/yq_linux_${architecture}
"

CONFIG=/opt/kc/etc/config
gluster_state="0"

if [ ! -f  ${CONFIG} ] ; then
  printf "initialize default kc configuration in <${CONFIG}>:"
  mkdir -p $(dirname ${CONFIG})
  echo 'KC_TSP_DIR="/tsp0"' >> ${CONFIG}
  cat ${CONFIG} | sed -e "s|^|> |g"
  exit 0
fi
. ${CONFIG}

host_list=$( cat ${KC_TSP_DIR}/config/hosts.conf )
##############################################################################################
_help() {
  IAM=`basename $0`
  if [ "$1" = "" ] ; then
    echo "# usage: "
    echo ""
    echo "$IAM [--short] [--state=<state>] [--domain=<domain>] <command>"
    echo "#"
    echo "# commands:"
    echo "#"
    echo " * install            # install external binaries"
    echo " * info               # show infos about kvm environment"
    echo " * status             # show gluster status"
    echo " * ls                 # human readable list"
    echo " * list [images]      # list domains only (scripting output)"
    echo " * up                 # shutoff domain and wait until is down"
    echo " * down               # start domain"
    echo " * rm doamin|complete # destroy, undefine domain and assigned images"
    echo " * mig <target-node>  # live migration to target"
    echo " * sparsify           # sparsify assigned images"
    echo " * gluster_check      # ret=0..OK, ret=1..ERR"
    echo " * syncxml            # syncxml on all hosts"

    echo "#"
    echo "# examples:"
    echo "#"
    echo "$IAM --node=node2   mig node1 # migration all domains from node2 to node1"
    echo "$IAM --domain=test mig node2 # migration domain test to node2"

    echo ""

    echo "#"
    echo "# other kc commands:"
    echo "#"
    echo "kc-backup <command>  # USB-HD backup/restore" 
    echo "kc-rsync             # old USB-HD backup/restore"
    echo "kc-temp-disk"
    echo ""
  fi
}
#############################
_virsh() {
  _node="$1"
  shift
  virsh -c qemu+ssh://root@${_node}/system $@
  return $?
}
#############################
_ssh() {
  _node="$1"
  shift
  ssh -q root@${_node} $@
}
#############################
_copyxml() {
  node="$1" ; domain="$2" ; target_node="$3" ; target_domain="$4"
  FI=$( mktemp )
  _virsh ${node} dumpxml $domain            > $FI
  sed -i "s|<name>${domain}</name>|<name>${target_domain}</name>|g"    $FI
  sed -i "/uuid/d" $FI # hardware addresses need to be removed, libvirt will assign new addresses
  # keep mac address  sed -i '/mac address/d' $FI
  _virsh ${target_node} define $FI
  rm $FI
}
#############################
_gluster_check() {
  FI=${KC_TSP_DIR}/config/gluster.conf
  if [ ! -e $FI ] ; then
    echo "missing gluster definition file <$FI>"
    return 1
  fi
  . $FI
  if [ "$KC_GLUSTER_ACTIVE"  = "false" ] ; then
    return 0
  fi 
  # check gluster status
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Status:/ {print $2}' )
  for i in $list ; do
    if [ "$i" != "Connected" ] ; then
      echo "gluster status error <$i>"
      return 1
    fi
  done
  # check gluster is in sync
  list=$( gluster volume heal ${KC_GLUSTER_VOLUME} info | awk '/^Number of entries:/ {print $4}' )
  declare -i count
  count=0
  for i in $list ; do count=count+${i} ; done
  if [ "$count" != "0" ] ; then
    echo "gluster not in sync (entries=$count)"
    return 1
  fi
  return 0
}
##############################################################################################
_list() {
  node=$1 ; domain=$2 ; state=$3 ; subcmd=$4
  if [ "$subcmd" = "" ] ; then
    printf "%s\n" "$domain"
  else
    unset img_arr ; declare -A img_arr
    eval $( _virsh $node domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
    for img in ${!img_arr[@]}; do
      #qemu-img info -U ${img_arr[$img]}
      printf "%s\n" "${img_arr[$img]}"
    done
  fi
  return 0
}
##############################################################################################
_ls() {
  node=$1 ; domain=$2 ; state=$3
  if [[ "$opt_short" = "1" ]] ; then
    printf "%s\n" "$domain"
  else
    unset img_arr ; declare -A img_arr
    eval $( _virsh $node domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
    images=""
    for img in ${!img_arr[@]}; do
      images="$images,$img:${img_arr[$img]}"
      #qemu-img info -U ${img_arr[$img]}
    done
    images=${images#,}
    printf "%-16s  %-8s  %-6s %s\n" "$domain" "$state" "$node" "$images"
  fi
  return 0
}
##############################################################################################
_down() {
  node=$1 ; domain=$2 ; state=$3
  if [[ "$state" != "shutoff" ]] ; then
    _virsh $node shutdown ${domain} >/dev/null
    # wait until system is down, timeout 120s
    i=0
    while true ; do
      i=$(( i + 1 ))
      sleep 1
      s=$( _virsh $node domstate ${domain} )
      printf "."
      if [[ "$s" == "shut off" ]] ; then
        break ;
      fi
      if [ $i -ge 180 ] ; then
         echo "error wait for shutoff!!!!"
         return 1
      fi
    done
    printf "\n"
  fi
  return $?
}
##############################################################################################
_up() {
  node=$1 ; domain=$2 ; state=$3
  _virsh $node start $domain >/dev/null
  return $?
}
##############################################################################################
_rm() {
  node=$1 ; domain=$2 ; state=$3 ; subcmd=$4
  if [[ "$subcmd" != "domain" && "$subcmd" != "complete" ]] ; then
    echo "error sub-command domain or complete not given!"
    return 1
  fi
  if [[ "$state" != "shutoff" && "$state" != "coldstby" ]] ; then
    _virsh $node destroy  $domain   # 
  fi
  if [[ "$subcmd" == "complete" ]] ; then
    unset img_arr ; declare -A img_arr
    eval $( _virsh $node domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
    for img in ${!img_arr[@]}; do
      KC_BACKUP_EXCLUDE="*_temp_disk.qcow2"
      if [[ "$(basename ${img_arr[$img]})" == $KC_BACKUP_EXCLUDE ]]; then
        echo "skipping deletion of image: <${img_arr[$img]}>, because of KC_BACKUP_EXCLUDE setting <$KC_BACKUP_EXCLUDE>"
        continue
      fi
      _ssh $node rm -f ${img_arr[$img]}
    done
  fi
  _virsh $node undefine $domain --checkpoints-metadata --snapshots-metadata # --remove-all-storage
  return $?
}
##############################################################################################
_mig() {
  node=$1 ; domain=$2 ; state=$3 ; target=$4
  if [ "$target" = "" ] ; then
    echo "error: migration target node not given!"
    return 1
  fi
  if [ "$state" = "coldstby" ] ; then
    echo "skipping coldstby domain <$domain>"
    return 0
  fi
  if [ "$gluster_state" != "0" ] ; then
    echo "error: gluster error!"
    return 1
  fi
  _virsh $target undefine "[${domain}:${target}]" 2>/dev/null
  _virsh $node   migrate --live $domain --persistent --undefinesource --verbose  qemu+ssh://root@${target}/system
  _copyxml  "${target}" "${domain}" "${node}" "[${domain}:${node}]"
  _virsh $target autostart $domain
  #chown libvirt-qemu:kvm ${KC_TSP_DIR}/images/*
  return 0
}
##############################################################################################
_sparsify() {
  node=$1 ; domain=$2 ; state=$3
  if [ "$state" = "coldstby" ] ; then
    echo "skipping coldstby domain <$domain>"
    return 0
  fi
  _down $@
  unset img_arr ; declare -A img_arr
  eval $( _virsh $node domblklist $domain --details | awk '/file +disk/ {print "img_arr["$3"]="$4}' )
  for img in ${!img_arr[@]}; do
    _ssh $node virt-sparsify --in-place ${img_arr[$img]}
  done
  _up $@
  return 0
}
##############################################################################################
_syncxml() {
  for node in $host_list ; do # delete coldstby domains
    dom_arr=()    
    dom_arr+=( `_virsh $node list --all | tail -n +3 | sed '/^[[:space:]]*$/d' | awk '{ print "node=\""  "'$node'\";" "domain=\"" $2 "\";" "state=\"" $3 $4 "\"" }' `)
    for value in ${dom_arr[@]} ; do
      domain=""; node="" ; state=""
      eval $value
      if [[ "$domain" == "["*"]"   ]] ; then
        kvmc --node=$node --domain=$domain rm domain
      fi
    done
  done
  for node in $host_list ; do  # sync non coldstby domains between nodes
  dom_arr=()
    dom_arr+=( `_virsh $node list --all | tail -n +3 | sed '/^[[:space:]]*$/d' | awk '{ print "node=\""  "'$node'\";" "domain=\"" $2 "\";" "state=\"" $3 $4 "\"" }' `)
    for value in ${dom_arr[@]} ; do
      domain=""; node="" ; state=""
      eval $value
      if [[ "$domain" != "["*"]"   ]] ; then
        for target_node in $host_list ; do
          if [[ "$node" == "$target_node" ]] ; then
            continue
          fi
          _copyxml "${node}" "${domain}" "${target_node}" "[${domain}:${target_node}]"
        done
      fi
    done
  done
  return 0
}
##############################################################################################
_backup() {
  MPOINT=/backup
  NAME="kvm-bup"
  node=$1 ; domain=$2 ; state=$3
  shift 3
  cmd=$1
  #
  # mount backup device
  #
  if [[ "$cmd" == "mount" || "$cmd" == "show" || "$cmd" == "delete" ]] ; then
    FI=${KC_TSP_DIR}/config/backup-uuids.conf
    if [ ! -e $FI ] ; then
      echo "error: missing uuid definition file <$FI>"
      return 1
    fi
    if [ ! -d $MPOINT ] ; then
      echo "create mountpoint: $MPOINT"
      mkdir -p $MPOINT
    fi
    _mount=0
    for UUID in $( cat $FI ) ; do
      DEV=`blkid  -U $UUID`
      ret=$?
      if [ "$ret" = "0" ] ; then
        mkdir -p /var/kc
        echo "$DEV" > /var/kc/device
        cryptsetup luksOpen $DEV $NAME < ${KC_TSP_DIR}/config/backup-passwd.conf
        mount /dev/mapper/$NAME $MPOINT
        . $MPOINT/INFO.cfg 
        echo "backup device: <${INFO_HD_NAME}> successfully mounted on <$MPOINT>"
        _mount=1
        break
      fi
    done
    if [ "${_mount}" != "1" ] ; then
      echo "no backup hd found"
      return 1
    fi
  fi
  #
  if [[ "$cmd" == "backup" ]] ; then   
    if [[ "$state" == "coldstby" ]] ; then
      return 0
    fi
    echo "TBD: backup $cmd node=$node ; domain=$domain ; state=$state"
  fi
  #
  if [[ "$cmd" == "restore" ]] ; then
    echo "TBD: backup $cmd node=$node ; domain=$domain ; state=$state"
  fi
  #
  if [[ "$cmd" == "virtinfo" ]] ; then
    if [[ "$state" == "coldstby" ]] ; then
      return 0
    fi
    echo "TBD: backup $cmd node=$node ; domain=$domain ; state=$state"
  fi
  #
 if [[ "$cmd" == "delete" ]] ; then 
    echo "TBD: backup $cmd node=$node ; domain=$domain ; state=$state"
  fi
  #
  if [[ "$cmd" == "show" ]] ; then
    tree $MPOINT
  fi
  #
  # un-mount backup device
  #
  if [[ "$cmd" == "umount" || "$cmd" == "show"  || "$cmd" == "delete" ]] ; then
    . $MPOINT/INFO.cfg
    umount $MPOINT
    cryptsetup luksClose $NAME
    echo "backup device: <${INFO_HD_NAME}> successfully unmounted from <$MPOINT>"
    if [ -f /var/kc/device  ] ; then
      hdparm -y  $(cat /var/kc/device) 2>/dev/null # spin-off disk
    fi
  fi
}
##############################################################################################
# magic main
##############################################################################################
opt_state=""
opt_short=""
opt_node=""
opt_domain=""
CURROPT=""
while [ "$#" -gt 0 ]; do
  case "$1" in
    --state=*)  opt_state=${1#*=}  ; shift 1 ;;
    --domain=*) opt_domain=${1#*=} ; shift 1 ;;
    --node=*)   opt_node=${1#*=}   ; shift 1 ;;
    --short)    opt_short="1"      ; shift 1 ;;
    *)   CURROPT="$CURROPT \"$1\"" ; shift 1 ;;
  esac
done
eval set -- $CURROPT


if [ "$1" = "" ] ; then
  _help
  exit 0
fi
if [ "$1" = "install" ] ; then
  # install external utilities
  mkdir -p /opt/kc/external
  while read -r i ; do
    name=$(    echo "$i" | cut -d";" -f1)
    ver=$(     echo "$i" | cut -d";" -f3)
    ver_cmd=$( echo "$i" | cut -d";" -f4)
    url=$(     echo "$i" | cut -d";" -f5 | sed -e "s/<VERSION>/$ver/g")
    version=""
    if [ -e /opt/kc/external/$name ] ; then
      version=$( /opt/kc/external/$name $ver_cmd 2>/dev/null | sed -e "s/(.*)//g" | grep -o '[0-9,.]*' )
    fi
    if [[ "$version" != "$ver" ]] ; then
      echo "kc install: external <$name>"
      FI=$(mktemp)
      wget -nv -O $FI $url
      rm -f /opt/kc/external/${name}
      if [[ $url == *".tar.gz" ]] ; then
        tar -C /opt/kc/external/ -xzf $FI
      else
        cp $FI /opt/kc/external/$name
      fi
      chmod a+x /opt/kc/external/$name
      rm -f $FI
    fi  
  done <<< "$(echo "$EXTERNALS")"
  exit 0
fi
CMD="$1"
shift

if [ "$CMD" = "status" ] ; then
  FI=${KC_TSP_DIR}/config/gluster.conf
  if [ ! -e $FI ] ; then
    echo "missing gluster definition file <$FI>"
    return 1
  fi
  . $FI
  gluster volume status ${KC_GLUSTER_VOLUME}      | sed -e "s|^|  |g"
  echo "---------------"          | sed -e "s|^|  |g"
  gluster volume info   ${KC_GLUSTER_VOLUME}      | sed -e "s|^|  |g"
  echo "---------------"          | sed -e "s|^|  |g"
  gluster volume heal   ${KC_GLUSTER_VOLUME} info | sed -e "s|^|  |g"
  echo "---------------"          | sed -e "s|^|  |g"
  echo ""
  exit 0
fi
if [ "$CMD" = "syncxml" ] ; then
  _syncxml
  exit $?
fi
if [ "$CMD" = "info" ] ; then
  _info
  exit $?
fi

if [[ "$CMD" == "backup" ]] ; then
  if [[ "$1" == "mount" || "$1" == "umount" || "$1" == "show"  || "$1" == "delete" ]] ; then
    _backup "" "" "" $@
    exit $?
  fi
  if [[ "$1" == "backup" || "$1" == "restore" || "$1" == "virtinfo"  ]] ; then
    _backup "" "" "" mount
  fi
fi
if [[ "$CMD" != "list" ]] ; then
  _gluster_check
  gluster_state=$?
  if [ "$CMD" = "gluster_check" ] ; then
    exit $gluster_state
  fi
fi
for node in $host_list ; do
  if [[  "$opt_node" != "" &&   "$opt_node" != "$node" ]] ; then
    continue
  fi
  dom_arr=( `_virsh $node list --all | tail -n +3 | sed '/^[[:space:]]*$/d' | awk '{ print "node=\""  "'$node'\";" "domain=\"" $2 "\";" "state=\"" $3 $4 "\"" }' `)
  for value in ${dom_arr[@]} ; do
    domain=""; node="" ; state=""
    eval $value
    if [[ "$domain" == "["*"]"   ]] ; then
      state="coldstby"
    fi
    if [[  "$opt_domain" != "" && "$opt_domain" != "$domain" ]] ; then
      continue
    fi
    if [[ "$opt_state" == "$state" || "$opt_state" == "" ]] ; then
      _${CMD} "$node" "$domain" "$state" $@
    fi
  done
done

if [[ "$1" == "backup" || "$1" == "restore" || "$1" == "virtinfo" ]] ; then
  _backup "" "" "" umount
fi

exit 0 


